apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/reports")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running live debug tests."

    reports {
        xml.enabled = true
        html.enabled = true
    }

    // what to exclude from coverage report
    // UI, "noise", generated classes, platform classes, etc.
    def fileFilter = [
            '**/R.class',
            '**/BR.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/Room*.*',
            '**/*_Impl.*',
            '**/MVVMComponent.*',
            '**/*Factory.*',
            '**/*Activity.*',
            '**/*Activity$*.class',
            '**/*Service.*',
            '**/*Service$*.class',
            '**/*ViewHolder.*',
            '**/*ViewHolder$*.class',
            '**/*Decoration.*',
            '**/*Decoration$*.class',
            '**/*Handler.*',
            '**/*Handler$*.*',
            '**/*Adapter.*',
            '**/*Adapter$*.class',
            '**/*Fragment.*',
            '**/*Fragment$*.class',
            '**/*EkoMessageItemUtil.class',
            '**/EkoPopUp.class',
            '**/EkoMessageType.class'
    ]

    def debugTree = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: fileFilter
    )
    def kotlinDebugTree = fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: fileFilter
    )
    def mainSrc = "$projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree], [kotlinDebugTree])
    executionData.from = fileTree(
            dir: project.buildDir,
            includes: [
                    'jacoco/testDebugUnitTest.exec',
                    'outputs/code-coverage/connected/*coverage.ec'
            ]
    )
}

tasks.whenTaskAdded { task ->
    if (task.name.contains("test") || task.name.contains("Test")) {
        task.enabled = true
    }
}